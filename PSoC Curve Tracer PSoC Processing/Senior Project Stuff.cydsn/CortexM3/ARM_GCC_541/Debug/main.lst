ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	__aeabi_dadd
  20              		.global	__aeabi_d2uiz
  21              		.section	.text.eight_bit_unsigned_round,"ax",%progbits
  22              		.align	2
  23              		.global	eight_bit_unsigned_round
  24              		.thumb
  25              		.thumb_func
  26              		.type	eight_bit_unsigned_round, %function
  27              	eight_bit_unsigned_round:
  28              	.LFB64:
  29              		.file 1 "minor_functions.h"
   1:minor_functions.h **** /* ========================================
   2:minor_functions.h ****  *
   3:minor_functions.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:minor_functions.h ****  * All Rights Reserved
   5:minor_functions.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:minor_functions.h ****  *
   7:minor_functions.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:minor_functions.h ****  * WHICH IS THE PROPERTY OF your company.
   9:minor_functions.h ****  *
  10:minor_functions.h ****  * ========================================
  11:minor_functions.h **** */
  12:minor_functions.h **** unsigned char eight_bit_unsigned_round(double x)
  13:minor_functions.h **** {
  30              		.loc 1 13 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 16
  33              		@ frame_needed = 1, uses_anonymous_args = 0
  34 0000 90B5     		push	{r4, r7, lr}
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 85B0     		sub	sp, sp, #20
  40              		.cfi_def_cfa_offset 32
  41 0004 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  43 0006 C7E90001 		strd	r0, [r7]
  14:minor_functions.h ****     unsigned char x_round;
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 2


  15:minor_functions.h ****     x_round = (unsigned char) (x + 0.5); //casting double + .5 to uint8_t (flooring) to round
  44              		.loc 1 15 0
  45 000a 4FF00002 		mov	r2, #0
  46 000e 094B     		ldr	r3, .L3
  47 0010 D7E90001 		ldrd	r0, [r7]
  48 0014 FFF7FEFF 		bl	__aeabi_dadd
  49 0018 0346     		mov	r3, r0
  50 001a 0C46     		mov	r4, r1
  51 001c 1846     		mov	r0, r3
  52 001e 2146     		mov	r1, r4
  53 0020 FFF7FEFF 		bl	__aeabi_d2uiz
  54 0024 0346     		mov	r3, r0
  55 0026 FB73     		strb	r3, [r7, #15]
  16:minor_functions.h ****     return x_round;
  56              		.loc 1 16 0
  57 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  17:minor_functions.h **** }
  58              		.loc 1 17 0
  59 002a 1846     		mov	r0, r3
  60 002c 1437     		adds	r7, r7, #20
  61              		.cfi_def_cfa_offset 12
  62 002e BD46     		mov	sp, r7
  63              		.cfi_def_cfa_register 13
  64              		@ sp needed
  65 0030 90BD     		pop	{r4, r7, pc}
  66              	.L4:
  67 0032 00BF     		.align	2
  68              	.L3:
  69 0034 0000E03F 		.word	1071644672
  70              		.cfi_endproc
  71              	.LFE64:
  72              		.size	eight_bit_unsigned_round, .-eight_bit_unsigned_round
  73              		.global	__aeabi_i2d
  74              		.global	__aeabi_ddiv
  75              		.section	.text.single_test,"ax",%progbits
  76              		.align	2
  77              		.global	single_test
  78              		.thumb
  79              		.thumb_func
  80              		.type	single_test, %function
  81              	single_test:
  82              	.LFB65:
  83              		.file 2 "main.c"
   1:main.c        **** #include "project.h"
   2:main.c        **** #include "stdio.h"
   3:main.c        **** #include "math.h"
   4:main.c        **** #include "string.h"
   5:main.c        **** #include "settings.h"
   6:main.c        **** #include "minor_functions.h"
   7:main.c        **** #define VDAC_G_B_MAX 255 //Max VDAC code for the Gate/Base 
   8:main.c        **** #define VDAC_D_C_MAX 188 //Max VDAC for the Drain/Common
   9:main.c        **** #define VDS_NMOS_LENGTH ((VDAC_D_C_MAX/VD_STEP_NMOS) + 1)
  10:main.c        **** #define VCE_NPN_LENGTH  ((VDAC_D_C_MAX/VC_STEP_NPN + 1)
  11:main.c        **** #define VDS_PMOS_LENGTH ((VDAC_D_C_MAX/VD_STEP_PMOS) + 1)
  12:main.c        **** #define VCE_PNP_LENGTH  ((VDAC_D_C_MAX/VC_STEP_PNP + 1)
  13:main.c        **** #define VDAC_N_1_VOLT 21
  14:main.c        **** #define VDAC_P_1_VOLT 13
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 3


  15:main.c        **** #define ADC_GAIN 51.7
  16:main.c        **** //The lengths of Drain or Common testing points
  17:main.c        **** 
  18:main.c        **** //Conducts a test for a singular Vds and Vgs
  19:main.c        **** double single_test(unsigned char Vds, unsigned char Vgs)
  20:main.c        **** {
  84              		.loc 2 20 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 16
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 90B5     		push	{r4, r7, lr}
  89              		.cfi_def_cfa_offset 12
  90              		.cfi_offset 4, -12
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 85B0     		sub	sp, sp, #20
  94              		.cfi_def_cfa_offset 32
  95 0004 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
  97 0006 0346     		mov	r3, r0
  98 0008 0A46     		mov	r2, r1
  99 000a FB71     		strb	r3, [r7, #7]
 100 000c 1346     		mov	r3, r2
 101 000e BB71     		strb	r3, [r7, #6]
  21:main.c        ****     double Output;
  22:main.c        ****     VDAC8_DS_SetValue(Vds);
 102              		.loc 2 22 0
 103 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 104 0012 1846     		mov	r0, r3
 105 0014 FFF7FEFF 		bl	VDAC8_DS_SetValue
  23:main.c        ****     VDAC8_GS_SetValue(Vgs);
 106              		.loc 2 23 0
 107 0018 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 108 001a 1846     		mov	r0, r3
 109 001c FFF7FEFF 		bl	VDAC8_GS_SetValue
  24:main.c        ****     CyDelay(SETTLING_WAIT_TIME);
 110              		.loc 2 24 0
 111 0020 0120     		movs	r0, #1
 112 0022 FFF7FEFF 		bl	CyDelay
  25:main.c        ****     ADC_SAR_1_StartConvert();
 113              		.loc 2 25 0
 114 0026 FFF7FEFF 		bl	ADC_SAR_1_StartConvert
  26:main.c        ****     ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
 115              		.loc 2 26 0
 116 002a 0020     		movs	r0, #0
 117 002c FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
  27:main.c        **** 	//waiting until conversion is over
  28:main.c        ****     ADC_SAR_1_StopConvert();
 118              		.loc 2 28 0
 119 0030 FFF7FEFF 		bl	ADC_SAR_1_StopConvert
  29:main.c        ****     Output = (ADC_SAR_1_CountsTo_mVolts(ADC_SAR_1_GetResult16())/ADC_GAIN);
 120              		.loc 2 29 0
 121 0034 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 122 0038 0346     		mov	r3, r0
 123 003a 1846     		mov	r0, r3
 124 003c FFF7FEFF 		bl	ADC_SAR_1_CountsTo_mVolts
 125 0040 0346     		mov	r3, r0
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 4


 126 0042 1846     		mov	r0, r3
 127 0044 FFF7FEFF 		bl	__aeabi_i2d
 128 0048 07A3     		adr	r3, .L7
 129 004a D3E90023 		ldrd	r2, [r3]
 130 004e FFF7FEFF 		bl	__aeabi_ddiv
 131 0052 0346     		mov	r3, r0
 132 0054 0C46     		mov	r4, r1
 133 0056 C7E90234 		strd	r3, [r7, #8]
  30:main.c        ****     return Output;
 134              		.loc 2 30 0
 135 005a D7E90234 		ldrd	r3, [r7, #8]
  31:main.c        **** }
 136              		.loc 2 31 0
 137 005e 1846     		mov	r0, r3
 138 0060 2146     		mov	r1, r4
 139 0062 1437     		adds	r7, r7, #20
 140              		.cfi_def_cfa_offset 12
 141 0064 BD46     		mov	sp, r7
 142              		.cfi_def_cfa_register 13
 143              		@ sp needed
 144 0066 90BD     		pop	{r4, r7, pc}
 145              	.L8:
 146              		.align	3
 147              	.L7:
 148 0068 9A999999 		.word	-1717986918
 149 006c 99D94940 		.word	1078581657
 150              		.cfi_endproc
 151              	.LFE65:
 152              		.size	single_test, .-single_test
 153              		.section	.text.single_test_preset_vds,"ax",%progbits
 154              		.align	2
 155              		.global	single_test_preset_vds
 156              		.thumb
 157              		.thumb_func
 158              		.type	single_test_preset_vds, %function
 159              	single_test_preset_vds:
 160              	.LFB66:
  32:main.c        **** 
  33:main.c        **** double single_test_preset_vds(unsigned char Vgs)
  34:main.c        **** {
 161              		.loc 2 34 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 16
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0000 90B5     		push	{r4, r7, lr}
 166              		.cfi_def_cfa_offset 12
 167              		.cfi_offset 4, -12
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 0002 85B0     		sub	sp, sp, #20
 171              		.cfi_def_cfa_offset 32
 172 0004 00AF     		add	r7, sp, #0
 173              		.cfi_def_cfa_register 7
 174 0006 0346     		mov	r3, r0
 175 0008 FB71     		strb	r3, [r7, #7]
  35:main.c        ****     double Output;
  36:main.c        ****     VDAC8_GS_SetValue(Vgs);
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 5


 176              		.loc 2 36 0
 177 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 178 000c 1846     		mov	r0, r3
 179 000e FFF7FEFF 		bl	VDAC8_GS_SetValue
  37:main.c        ****     CyDelay(SETTLING_WAIT_TIME);
 180              		.loc 2 37 0
 181 0012 0120     		movs	r0, #1
 182 0014 FFF7FEFF 		bl	CyDelay
  38:main.c        ****     ADC_SAR_1_StartConvert();
 183              		.loc 2 38 0
 184 0018 FFF7FEFF 		bl	ADC_SAR_1_StartConvert
  39:main.c        ****     ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
 185              		.loc 2 39 0
 186 001c 0020     		movs	r0, #0
 187 001e FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
  40:main.c        **** 	//waiting until conversion is over
  41:main.c        ****     ADC_SAR_1_StopConvert();
 188              		.loc 2 41 0
 189 0022 FFF7FEFF 		bl	ADC_SAR_1_StopConvert
  42:main.c        ****     Output = (ADC_SAR_1_CountsTo_mVolts(ADC_SAR_1_GetResult16())/ADC_GAIN);
 190              		.loc 2 42 0
 191 0026 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 192 002a 0346     		mov	r3, r0
 193 002c 1846     		mov	r0, r3
 194 002e FFF7FEFF 		bl	ADC_SAR_1_CountsTo_mVolts
 195 0032 0346     		mov	r3, r0
 196 0034 1846     		mov	r0, r3
 197 0036 FFF7FEFF 		bl	__aeabi_i2d
 198 003a 09A3     		adr	r3, .L11
 199 003c D3E90023 		ldrd	r2, [r3]
 200 0040 FFF7FEFF 		bl	__aeabi_ddiv
 201 0044 0346     		mov	r3, r0
 202 0046 0C46     		mov	r4, r1
 203 0048 C7E90234 		strd	r3, [r7, #8]
  43:main.c        ****     return Output;
 204              		.loc 2 43 0
 205 004c D7E90234 		ldrd	r3, [r7, #8]
  44:main.c        **** }
 206              		.loc 2 44 0
 207 0050 1846     		mov	r0, r3
 208 0052 2146     		mov	r1, r4
 209 0054 1437     		adds	r7, r7, #20
 210              		.cfi_def_cfa_offset 12
 211 0056 BD46     		mov	sp, r7
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 0058 90BD     		pop	{r4, r7, pc}
 215              	.L12:
 216 005a 00BFAFF3 		.align	3
 216      0080
 217              	.L11:
 218 0060 9A999999 		.word	-1717986918
 219 0064 99D94940 		.word	1078581657
 220              		.cfi_endproc
 221              	.LFE66:
 222              		.size	single_test_preset_vds, .-single_test_preset_vds
 223              		.global	__aeabi_dcmpgt
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 6


 224              		.section	.text.vgs_th_find,"ax",%progbits
 225              		.align	2
 226              		.global	vgs_th_find
 227              		.thumb
 228              		.thumb_func
 229              		.type	vgs_th_find, %function
 230              	vgs_th_find:
 231              	.LFB67:
  45:main.c        ****     
  46:main.c        **** 
  47:main.c        **** //Finds Vth (The minimum Vgs needed to turn the transistor by sorting through Vgs's until 
  48:main.c        **** //a minumum current of 1 mA is found Id is found by a 1 Ohm series resistor whose potential 
  49:main.c        **** //difference is magnitifed 100 fold for accurate reading
  50:main.c        **** int vgs_th_find(unsigned char Vgs_max, unsigned char Vds)
  51:main.c        **** {
 232              		.loc 2 51 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 24
 235              		@ frame_needed = 1, uses_anonymous_args = 0
 236 0000 90B5     		push	{r4, r7, lr}
 237              		.cfi_def_cfa_offset 12
 238              		.cfi_offset 4, -12
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 87B0     		sub	sp, sp, #28
 242              		.cfi_def_cfa_offset 40
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 0346     		mov	r3, r0
 246 0008 0A46     		mov	r2, r1
 247 000a FB71     		strb	r3, [r7, #7]
 248 000c 1346     		mov	r3, r2
 249 000e BB71     		strb	r3, [r7, #6]
  52:main.c        ****     unsigned char   Vgs;           
  53:main.c        **** 	//The Gate-Drain Voltage difference | Vds_real = Vds/256 * 4.096 * 3 (OpAmp gain)
  54:main.c        ****     double          Id=0;         
 250              		.loc 2 54 0
 251 0010 4FF00003 		mov	r3, #0
 252 0014 4FF00004 		mov	r4, #0
 253 0018 C7E90234 		strd	r3, [r7, #8]
  55:main.c        **** 	//The Drain Current | Id_real = Id/100
  56:main.c        ****     
  57:main.c        ****     VDAC8_DS_SetValue(Vds); //Set Vds to 1 Volt
 254              		.loc 2 57 0
 255 001c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 256 001e 1846     		mov	r0, r3
 257 0020 FFF7FEFF 		bl	VDAC8_DS_SetValue
  58:main.c        ****     VDAC8_GS_SetValue(0);
 258              		.loc 2 58 0
 259 0024 0020     		movs	r0, #0
 260 0026 FFF7FEFF 		bl	VDAC8_GS_SetValue
  59:main.c        ****     for(Vgs = 0; Vgs < Vgs_max; Vgs++)
 261              		.loc 2 59 0
 262 002a 0023     		movs	r3, #0
 263 002c FB75     		strb	r3, [r7, #23]
 264 002e 14E0     		b	.L14
 265              	.L18:
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 7


  60:main.c        ****     {
  61:main.c        ****         Id = single_test_preset_vds(Vgs);
 266              		.loc 2 61 0
 267 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 268 0032 1846     		mov	r0, r3
 269 0034 FFF7FEFF 		bl	single_test_preset_vds
 270 0038 C7E90201 		strd	r0, [r7, #8]
  62:main.c        ****         if(Id > ID_TH)
 271              		.loc 2 62 0
 272 003c 4FF00002 		mov	r2, #0
 273 0040 0B4B     		ldr	r3, .L21
 274 0042 D7E90201 		ldrd	r0, [r7, #8]
 275 0046 FFF7FEFF 		bl	__aeabi_dcmpgt
 276 004a 0346     		mov	r3, r0
 277 004c 002B     		cmp	r3, #0
 278 004e 01D0     		beq	.L20
  63:main.c        ****         {
  64:main.c        ****             //Once Id > 1 mV transistor is "on" and we can return Vgs as Vth
  65:main.c        ****             return Vgs;
 279              		.loc 2 65 0
 280 0050 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 281 0052 08E0     		b	.L17
 282              	.L20:
  59:main.c        ****     {
 283              		.loc 2 59 0 discriminator 2
 284 0054 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 285 0056 0133     		adds	r3, r3, #1
 286 0058 FB75     		strb	r3, [r7, #23]
 287              	.L14:
  59:main.c        ****     {
 288              		.loc 2 59 0 is_stmt 0 discriminator 1
 289 005a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 290 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 291 005e 9A42     		cmp	r2, r3
 292 0060 E6D3     		bcc	.L18
  66:main.c        ****         }
  67:main.c        ****     }
  68:main.c        ****     return -1; //If a Vth cannot be found
 293              		.loc 2 68 0 is_stmt 1
 294 0062 4FF0FF33 		mov	r3, #-1
 295              	.L17:
  69:main.c        **** }
 296              		.loc 2 69 0
 297 0066 1846     		mov	r0, r3
 298 0068 1C37     		adds	r7, r7, #28
 299              		.cfi_def_cfa_offset 12
 300 006a BD46     		mov	sp, r7
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 006c 90BD     		pop	{r4, r7, pc}
 304              	.L22:
 305 006e 00BF     		.align	2
 306              	.L21:
 307 0070 0000F03F 		.word	1072693248
 308              		.cfi_endproc
 309              	.LFE67:
 310              		.size	vgs_th_find, .-vgs_th_find
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 8


 311              		.global	__aeabi_dcmpge
 312              		.section	.text.vgs_max_id_find,"ax",%progbits
 313              		.align	2
 314              		.global	vgs_max_id_find
 315              		.thumb
 316              		.thumb_func
 317              		.type	vgs_max_id_find, %function
 318              	vgs_max_id_find:
 319              	.LFB68:
  70:main.c        **** 
  71:main.c        **** //Finds the MAX current 20mA, Id is found through a 100 Ohm series resistor
  72:main.c        **** //Sweeps through Vgs until a max current of 20 mA is found
  73:main.c        **** //Therefor ID_MAX = 20*100 == 2000
  74:main.c        **** unsigned short vgs_max_id_find(unsigned char Vth, unsigned char Vds_max, unsigned char Vgs_max)
  75:main.c        **** {
 320              		.loc 2 75 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 24
 323              		@ frame_needed = 1, uses_anonymous_args = 0
 324 0000 80B5     		push	{r7, lr}
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 86B0     		sub	sp, sp, #24
 329              		.cfi_def_cfa_offset 32
 330 0004 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 332 0006 0346     		mov	r3, r0
 333 0008 FB71     		strb	r3, [r7, #7]
 334 000a 0B46     		mov	r3, r1
 335 000c BB71     		strb	r3, [r7, #6]
 336 000e 1346     		mov	r3, r2
 337 0010 7B71     		strb	r3, [r7, #5]
  76:main.c        ****     unsigned char   Vgs;
  77:main.c        **** 	//The Gate-Source Voltage difference | Vgs_real = Vgs/256 * 4.096
  78:main.c        ****     double          Id; 
  79:main.c        **** 	//The Drain Current | Id_real = Id/100
  80:main.c        ****     
  81:main.c        ****     VDAC8_DS_SetValue(Vds_max);
 338              		.loc 2 81 0
 339 0012 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 340 0014 1846     		mov	r0, r3
 341 0016 FFF7FEFF 		bl	VDAC8_DS_SetValue
  82:main.c        **** 	//Sets Vds = 188/256 * 4.096 * 3 = 9V (max Vds to test wtih) to find max current
  83:main.c        ****     for(Vgs = Vth; Vgs < Vgs_max; Vgs++)
 342              		.loc 2 83 0
 343 001a FB79     		ldrb	r3, [r7, #7]
 344 001c FB75     		strb	r3, [r7, #23]
 345 001e 12E0     		b	.L24
 346              	.L28:
  84:main.c        ****     {
  85:main.c        ****         Id = single_test_preset_vds(Vgs);
 347              		.loc 2 85 0
 348 0020 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 349 0022 1846     		mov	r0, r3
 350 0024 FFF7FEFF 		bl	single_test_preset_vds
 351 0028 C7E90201 		strd	r0, [r7, #8]
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 9


  86:main.c        ****         if (Id >= ID_MAX)
 352              		.loc 2 86 0
 353 002c 4FF00002 		mov	r2, #0
 354 0030 0C4B     		ldr	r3, .L31
 355 0032 D7E90201 		ldrd	r0, [r7, #8]
 356 0036 FFF7FEFF 		bl	__aeabi_dcmpge
 357 003a 0346     		mov	r3, r0
 358 003c 002B     		cmp	r3, #0
 359 003e 07D1     		bne	.L30
  83:main.c        ****     {
 360              		.loc 2 83 0 discriminator 2
 361 0040 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 362 0042 0133     		adds	r3, r3, #1
 363 0044 FB75     		strb	r3, [r7, #23]
 364              	.L24:
  83:main.c        ****     {
 365              		.loc 2 83 0 is_stmt 0 discriminator 1
 366 0046 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 367 0048 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 368 004a 9A42     		cmp	r2, r3
 369 004c E8D3     		bcc	.L28
 370 004e 00E0     		b	.L27
 371              	.L30:
  87:main.c        ****         {
  88:main.c        ****             break; //Stop stepping once max current is hit
 372              		.loc 2 88 0 is_stmt 1
 373 0050 00BF     		nop
 374              	.L27:
  89:main.c        ****         }
  90:main.c        ****     }
  91:main.c        ****     return Vgs - 1; //Returns the previous Vgs step to avoid going past 20mA
 375              		.loc 2 91 0
 376 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 377 0054 9BB2     		uxth	r3, r3
 378 0056 013B     		subs	r3, r3, #1
 379 0058 9BB2     		uxth	r3, r3
  92:main.c        **** }
 380              		.loc 2 92 0
 381 005a 1846     		mov	r0, r3
 382 005c 1837     		adds	r7, r7, #24
 383              		.cfi_def_cfa_offset 8
 384 005e BD46     		mov	sp, r7
 385              		.cfi_def_cfa_register 13
 386              		@ sp needed
 387 0060 80BD     		pop	{r7, pc}
 388              	.L32:
 389 0062 00BF     		.align	2
 390              	.L31:
 391 0064 00003440 		.word	1077149696
 392              		.cfi_endproc
 393              	.LFE68:
 394              		.size	vgs_max_id_find, .-vgs_max_id_find
 395              		.global	__aeabi_dmul
 396              		.section	.text.main,"ax",%progbits
 397              		.align	2
 398              		.global	main
 399              		.thumb
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 10


 400              		.thumb_func
 401              		.type	main, %function
 402              	main:
 403              	.LFB69:
  93:main.c        **** 
  94:main.c        **** 
  95:main.c        **** 
  96:main.c        **** int main(void)
  97:main.c        **** {
 404              		.loc 2 97 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 7776
 407              		@ frame_needed = 1, uses_anonymous_args = 0
 408 0000 B0B5     		push	{r4, r5, r7, lr}
 409              		.cfi_def_cfa_offset 16
 410              		.cfi_offset 4, -16
 411              		.cfi_offset 5, -12
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 0002 ADF5F35D 		sub	sp, sp, #7776
 415              		.cfi_def_cfa_offset 7792
 416 0006 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
  98:main.c        ****     //Enabling VDACs and ADCs
  99:main.c        ****     VDAC8_GS_Start();
 418              		.loc 2 99 0
 419 0008 FFF7FEFF 		bl	VDAC8_GS_Start
 100:main.c        ****     VDAC8_DS_Start();
 420              		.loc 2 100 0
 421 000c FFF7FEFF 		bl	VDAC8_DS_Start
 101:main.c        ****     ADC_SAR_1_Start();
 422              		.loc 2 101 0
 423 0010 FFF7FEFF 		bl	ADC_SAR_1_Start
 102:main.c        ****     
 103:main.c        ****     int return_code;    //Going to be used for error displays
 104:main.c        ****     
 105:main.c        ****     int i;  //used for for loop iterations
 106:main.c        ****     int j;  //used for for loop iterations
 107:main.c        ****     
 108:main.c        ****     unsigned char device_selection = 0;   //The device selected 0: NMOS, 1: PMOS, 3: NPN, 4: PNP  
 424              		.loc 2 108 0
 425 0014 0023     		movs	r3, #0
 426 0016 07F5F252 		add	r2, r7, #7744
 427 001a 02F11702 		add	r2, r2, #23
 428 001e 1370     		strb	r3, [r2]
 109:main.c        ****     
 110:main.c        ****     int Vth;      //VDAC code for the threshold voltage
 111:main.c        ****     short Vgs_max;  //VDAC code for the the maximum Vgs that produces < 20 mA 
 112:main.c        ****     
 113:main.c        ****     unsigned char Vgs_step;                         //The stepping amount to create the Vgs test po
 114:main.c        ****     unsigned char Vgs_test_points[CURVE_NUM];       //The Vgs stepping points of ammount specified 
 115:main.c        ****     unsigned char Vds_test_points[VDS_NMOS_LENGTH]; //The Vds stepping points of ammount specified 
 116:main.c        ****     
 117:main.c        ****     double Output_data_y[CURVE_NUM][VDS_NMOS_LENGTH] = {0};   //The output data of Id NMOS trace in
 429              		.loc 2 117 0
 430 0020 07F5C063 		add	r3, r7, #1536
 431 0024 183B     		subs	r3, r3, #24
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 11


 432 0026 1846     		mov	r0, r3
 433 0028 4FF4BD53 		mov	r3, #6048
 434 002c 1A46     		mov	r2, r3
 435 002e 0021     		movs	r1, #0
 436 0030 FFF7FEFF 		bl	memset
 437              	.L44:
 118:main.c        ****     double Output_data_x[VDS_NMOS_LENGTH];                   //The Vds points used. Used for plotti
 119:main.c        ****     
 120:main.c        ****     
 121:main.c        ****     for(;;)
 122:main.c        ****     {
 123:main.c        ****         i=0;
 438              		.loc 2 123 0
 439 0034 0023     		movs	r3, #0
 440 0036 07F5F252 		add	r2, r7, #7744
 441 003a 02F11C02 		add	r2, r2, #28
 442 003e 1360     		str	r3, [r2]
 124:main.c        ****         ADC_SAR_1_Wakeup();
 443              		.loc 2 124 0
 444 0040 FFF7FEFF 		bl	ADC_SAR_1_Wakeup
 125:main.c        ****         //case 0:
 126:main.c        ****         //NMOS input
 127:main.c        ****         Vth =  vgs_th_find(VDAC_G_B_MAX,VDAC_N_1_VOLT);
 445              		.loc 2 127 0
 446 0044 1521     		movs	r1, #21
 447 0046 FF20     		movs	r0, #255
 448 0048 FFF7FEFF 		bl	vgs_th_find
 449 004c 07F5F253 		add	r3, r7, #7744
 450 0050 03F11003 		add	r3, r3, #16
 451 0054 1860     		str	r0, [r3]
 128:main.c        ****         if (Vth < 0)
 452              		.loc 2 128 0
 453 0056 07F5F253 		add	r3, r7, #7744
 454 005a 03F11003 		add	r3, r3, #16
 455 005e 1B68     		ldr	r3, [r3]
 456 0060 002B     		cmp	r3, #0
 457 0062 C0F24781 		blt	.L47
 129:main.c        ****         {
 130:main.c        ****             break;
 131:main.c        ****         }
 132:main.c        ****         Vgs_max = vgs_max_id_find(Vth,VDAC_D_C_MAX,220);
 458              		.loc 2 132 0
 459 0066 07F5F253 		add	r3, r7, #7744
 460 006a 03F11003 		add	r3, r3, #16
 461 006e 1B68     		ldr	r3, [r3]
 462 0070 DBB2     		uxtb	r3, r3
 463 0072 DC22     		movs	r2, #220
 464 0074 BC21     		movs	r1, #188
 465 0076 1846     		mov	r0, r3
 466 0078 FFF7FEFF 		bl	vgs_max_id_find
 467 007c 0346     		mov	r3, r0
 468 007e 07F5F252 		add	r2, r7, #7744
 469 0082 02F10E02 		add	r2, r2, #14
 470 0086 1380     		strh	r3, [r2]	@ movhi
 133:main.c        ****         Vgs_step = (Vgs_max - Vth)/(CURVE_NUM-1); //Creating the step size for linearlly spaced 
 471              		.loc 2 133 0
 472 0088 07F5F253 		add	r3, r7, #7744
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 12


 473 008c 03F10E03 		add	r3, r3, #14
 474 0090 B3F90020 		ldrsh	r2, [r3]
 475 0094 07F5F253 		add	r3, r7, #7744
 476 0098 03F11003 		add	r3, r3, #16
 477 009c 1B68     		ldr	r3, [r3]
 478 009e D31A     		subs	r3, r2, r3
 479 00a0 9B4A     		ldr	r2, .L48+8
 480 00a2 82FB0312 		smull	r1, r2, r2, r3
 481 00a6 DB17     		asrs	r3, r3, #31
 482 00a8 D31A     		subs	r3, r2, r3
 483 00aa 07F5F252 		add	r2, r7, #7744
 484 00ae 02F10D02 		add	r2, r2, #13
 485 00b2 1370     		strb	r3, [r2]
 134:main.c        ****         Vgs_test_points[0] = Vth;
 486              		.loc 2 134 0
 487 00b4 07F5F253 		add	r3, r7, #7744
 488 00b8 03F11003 		add	r3, r3, #16
 489 00bc 1B68     		ldr	r3, [r3]
 490 00be DBB2     		uxtb	r3, r3
 491 00c0 07F5F252 		add	r2, r7, #7744
 492 00c4 02F10802 		add	r2, r2, #8
 493 00c8 1370     		strb	r3, [r2]
 135:main.c        ****         for (i=1; i < CURVE_NUM; i++)
 494              		.loc 2 135 0
 495 00ca 0123     		movs	r3, #1
 496 00cc 07F5F252 		add	r2, r7, #7744
 497 00d0 02F11C02 		add	r2, r2, #28
 498 00d4 1360     		str	r3, [r2]
 499 00d6 28E0     		b	.L36
 500              	.L37:
 136:main.c        ****         {
 137:main.c        ****             Vgs_test_points[i] = (Vgs_test_points[i-1] + Vgs_step);
 501              		.loc 2 137 0 discriminator 3
 502 00d8 07F5F253 		add	r3, r7, #7744
 503 00dc 03F11C03 		add	r3, r3, #28
 504 00e0 1B68     		ldr	r3, [r3]
 505 00e2 013B     		subs	r3, r3, #1
 506 00e4 07F5F352 		add	r2, r7, #7776
 507 00e8 1344     		add	r3, r3, r2
 508 00ea 13F8182C 		ldrb	r2, [r3, #-24]	@ zero_extendqisi2
 509 00ee 07F5F253 		add	r3, r7, #7744
 510 00f2 03F10D03 		add	r3, r3, #13
 511 00f6 1B78     		ldrb	r3, [r3]
 512 00f8 1344     		add	r3, r3, r2
 513 00fa D9B2     		uxtb	r1, r3
 514 00fc 07F5F252 		add	r2, r7, #7744
 515 0100 02F10802 		add	r2, r2, #8
 516 0104 07F5F253 		add	r3, r7, #7744
 517 0108 03F11C03 		add	r3, r3, #28
 518 010c 1B68     		ldr	r3, [r3]
 519 010e 1344     		add	r3, r3, r2
 520 0110 0A46     		mov	r2, r1
 521 0112 1A70     		strb	r2, [r3]
 135:main.c        ****         for (i=1; i < CURVE_NUM; i++)
 522              		.loc 2 135 0 discriminator 3
 523 0114 07F5F253 		add	r3, r7, #7744
 524 0118 03F11C03 		add	r3, r3, #28
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 13


 525 011c 1B68     		ldr	r3, [r3]
 526 011e 0133     		adds	r3, r3, #1
 527 0120 07F5F252 		add	r2, r7, #7744
 528 0124 02F11C02 		add	r2, r2, #28
 529 0128 1360     		str	r3, [r2]
 530              	.L36:
 135:main.c        ****         for (i=1; i < CURVE_NUM; i++)
 531              		.loc 2 135 0 is_stmt 0 discriminator 1
 532 012a 07F5F253 		add	r3, r7, #7744
 533 012e 03F11C03 		add	r3, r3, #28
 534 0132 1B68     		ldr	r3, [r3]
 535 0134 032B     		cmp	r3, #3
 536 0136 CFDD     		ble	.L37
 138:main.c        ****         }
 139:main.c        ****         Vds_test_points[0] = 0;
 537              		.loc 2 139 0 is_stmt 1
 538 0138 0023     		movs	r3, #0
 539 013a 07F5EC52 		add	r2, r7, #7552
 540 013e 02F10802 		add	r2, r2, #8
 541 0142 1370     		strb	r3, [r2]
 140:main.c        ****         Output_data_x[0] = 0;
 542              		.loc 2 140 0
 543 0144 3A46     		mov	r2, r7
 544 0146 4FF00003 		mov	r3, #0
 545 014a 4FF00004 		mov	r4, #0
 546 014e C2E90034 		strd	r3, [r2]
 141:main.c        ****         for(i=1; i < VDS_NMOS_LENGTH; i++)
 547              		.loc 2 141 0
 548 0152 0123     		movs	r3, #1
 549 0154 07F5F252 		add	r2, r7, #7744
 550 0158 02F11C02 		add	r2, r2, #28
 551 015c 1360     		str	r3, [r2]
 552 015e 54E0     		b	.L38
 553              	.L39:
 142:main.c        ****         {
 143:main.c        ****             Vds_test_points[i] = Vds_test_points[i-1] + VD_STEP_NMOS;
 554              		.loc 2 143 0 discriminator 3
 555 0160 07F5F253 		add	r3, r7, #7744
 556 0164 03F11C03 		add	r3, r3, #28
 557 0168 1B68     		ldr	r3, [r3]
 558 016a 013B     		subs	r3, r3, #1
 559 016c 07F5F352 		add	r2, r7, #7776
 560 0170 1344     		add	r3, r3, r2
 561 0172 13F8D83C 		ldrb	r3, [r3, #-216]	@ zero_extendqisi2
 562 0176 0133     		adds	r3, r3, #1
 563 0178 D9B2     		uxtb	r1, r3
 564 017a 07F5EC52 		add	r2, r7, #7552
 565 017e 02F10802 		add	r2, r2, #8
 566 0182 07F5F253 		add	r3, r7, #7744
 567 0186 03F11C03 		add	r3, r3, #28
 568 018a 1B68     		ldr	r3, [r3]
 569 018c 1344     		add	r3, r3, r2
 570 018e 0A46     		mov	r2, r1
 571 0190 1A70     		strb	r2, [r3]
 144:main.c        ****             Output_data_x[i] = Vds_test_points[i-1]/256.0 * 3.0 * 4.096;
 572              		.loc 2 144 0 discriminator 3
 573 0192 07F5F253 		add	r3, r7, #7744
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 14


 574 0196 03F11C03 		add	r3, r3, #28
 575 019a 1B68     		ldr	r3, [r3]
 576 019c 013B     		subs	r3, r3, #1
 577 019e 07F5F352 		add	r2, r7, #7776
 578 01a2 1344     		add	r3, r3, r2
 579 01a4 13F8D83C 		ldrb	r3, [r3, #-216]	@ zero_extendqisi2
 580 01a8 1846     		mov	r0, r3
 581 01aa FFF7FEFF 		bl	__aeabi_i2d
 582 01ae 4FF00002 		mov	r2, #0
 583 01b2 584B     		ldr	r3, .L48+12
 584 01b4 FFF7FEFF 		bl	__aeabi_ddiv
 585 01b8 0346     		mov	r3, r0
 586 01ba 0C46     		mov	r4, r1
 587 01bc 1846     		mov	r0, r3
 588 01be 2146     		mov	r1, r4
 589 01c0 4FF00002 		mov	r2, #0
 590 01c4 544B     		ldr	r3, .L48+16
 591 01c6 FFF7FEFF 		bl	__aeabi_dmul
 592 01ca 0346     		mov	r3, r0
 593 01cc 0C46     		mov	r4, r1
 594 01ce 1846     		mov	r0, r3
 595 01d0 2146     		mov	r1, r4
 596 01d2 4DA3     		adr	r3, .L48
 597 01d4 D3E90023 		ldrd	r2, [r3]
 598 01d8 FFF7FEFF 		bl	__aeabi_dmul
 599 01dc 0346     		mov	r3, r0
 600 01de 0C46     		mov	r4, r1
 601 01e0 3946     		mov	r1, r7
 602 01e2 07F5F252 		add	r2, r7, #7744
 603 01e6 02F11C02 		add	r2, r2, #28
 604 01ea 1268     		ldr	r2, [r2]
 605 01ec D200     		lsls	r2, r2, #3
 606 01ee 0A44     		add	r2, r2, r1
 607 01f0 C2E90034 		strd	r3, [r2]
 141:main.c        ****         for(i=1; i < VDS_NMOS_LENGTH; i++)
 608              		.loc 2 141 0 discriminator 3
 609 01f4 07F5F253 		add	r3, r7, #7744
 610 01f8 03F11C03 		add	r3, r3, #28
 611 01fc 1B68     		ldr	r3, [r3]
 612 01fe 0133     		adds	r3, r3, #1
 613 0200 07F5F252 		add	r2, r7, #7744
 614 0204 02F11C02 		add	r2, r2, #28
 615 0208 1360     		str	r3, [r2]
 616              	.L38:
 141:main.c        ****         for(i=1; i < VDS_NMOS_LENGTH; i++)
 617              		.loc 2 141 0 is_stmt 0 discriminator 1
 618 020a 07F5F253 		add	r3, r7, #7744
 619 020e 03F11C03 		add	r3, r3, #28
 620 0212 1B68     		ldr	r3, [r3]
 621 0214 BC2B     		cmp	r3, #188
 622 0216 A3DD     		ble	.L39
 145:main.c        ****         }
 146:main.c        ****         for(i = 0; i < CURVE_NUM; i++)
 623              		.loc 2 146 0 is_stmt 1
 624 0218 0023     		movs	r3, #0
 625 021a 07F5F252 		add	r2, r7, #7744
 626 021e 02F11C02 		add	r2, r2, #28
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 15


 627 0222 1360     		str	r3, [r2]
 628 0224 55E0     		b	.L40
 629              	.L43:
 147:main.c        ****         {
 148:main.c        ****             for(j = 0; j < VDS_NMOS_LENGTH; j++)
 630              		.loc 2 148 0
 631 0226 0023     		movs	r3, #0
 632 0228 07F5F252 		add	r2, r7, #7744
 633 022c 02F11802 		add	r2, r2, #24
 634 0230 1360     		str	r3, [r2]
 635 0232 3CE0     		b	.L41
 636              	.L42:
 149:main.c        ****             {
 150:main.c        ****                 Output_data_y[i][j] = single_test(Vds_test_points[j],Vgs_test_points[i]);
 637              		.loc 2 150 0 discriminator 3
 638 0234 07F5EC52 		add	r2, r7, #7552
 639 0238 02F10802 		add	r2, r2, #8
 640 023c 07F5F253 		add	r3, r7, #7744
 641 0240 03F11803 		add	r3, r3, #24
 642 0244 1B68     		ldr	r3, [r3]
 643 0246 1344     		add	r3, r3, r2
 644 0248 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 645 024a 07F5F252 		add	r2, r7, #7744
 646 024e 02F10802 		add	r2, r2, #8
 647 0252 07F5F253 		add	r3, r7, #7744
 648 0256 03F11C03 		add	r3, r3, #28
 649 025a 1B68     		ldr	r3, [r3]
 650 025c 1344     		add	r3, r3, r2
 651 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 652 0260 1946     		mov	r1, r3
 653 0262 FFF7FEFF 		bl	single_test
 654 0266 0446     		mov	r4, r0
 655 0268 0D46     		mov	r5, r1
 656 026a 07F5C062 		add	r2, r7, #1536
 657 026e 183A     		subs	r2, r2, #24
 658 0270 07F5F253 		add	r3, r7, #7744
 659 0274 03F11C03 		add	r3, r3, #28
 660 0278 1968     		ldr	r1, [r3]
 661 027a 0B46     		mov	r3, r1
 662 027c 5B00     		lsls	r3, r3, #1
 663 027e 0B44     		add	r3, r3, r1
 664 0280 9901     		lsls	r1, r3, #6
 665 0282 C91A     		subs	r1, r1, r3
 666 0284 07F5F253 		add	r3, r7, #7744
 667 0288 03F11803 		add	r3, r3, #24
 668 028c 1B68     		ldr	r3, [r3]
 669 028e 0B44     		add	r3, r3, r1
 670 0290 DB00     		lsls	r3, r3, #3
 671 0292 1344     		add	r3, r3, r2
 672 0294 C3E90045 		strd	r4, [r3]
 148:main.c        ****             {
 673              		.loc 2 148 0 discriminator 3
 674 0298 07F5F253 		add	r3, r7, #7744
 675 029c 03F11803 		add	r3, r3, #24
 676 02a0 1B68     		ldr	r3, [r3]
 677 02a2 0133     		adds	r3, r3, #1
 678 02a4 07F5F252 		add	r2, r7, #7744
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 16


 679 02a8 02F11802 		add	r2, r2, #24
 680 02ac 1360     		str	r3, [r2]
 681              	.L41:
 148:main.c        ****             {
 682              		.loc 2 148 0 is_stmt 0 discriminator 1
 683 02ae 07F5F253 		add	r3, r7, #7744
 684 02b2 03F11803 		add	r3, r3, #24
 685 02b6 1B68     		ldr	r3, [r3]
 686 02b8 BC2B     		cmp	r3, #188
 687 02ba BBDD     		ble	.L42
 146:main.c        ****         {
 688              		.loc 2 146 0 is_stmt 1 discriminator 2
 689 02bc 07F5F253 		add	r3, r7, #7744
 690 02c0 03F11C03 		add	r3, r3, #28
 691 02c4 1B68     		ldr	r3, [r3]
 692 02c6 0133     		adds	r3, r3, #1
 693 02c8 07F5F252 		add	r2, r7, #7744
 694 02cc 02F11C02 		add	r2, r2, #28
 695 02d0 1360     		str	r3, [r2]
 696              	.L40:
 146:main.c        ****         {
 697              		.loc 2 146 0 is_stmt 0 discriminator 1
 698 02d2 07F5F253 		add	r3, r7, #7744
 699 02d6 03F11C03 		add	r3, r3, #28
 700 02da 1B68     		ldr	r3, [r3]
 701 02dc 032B     		cmp	r3, #3
 702 02de A2DD     		ble	.L43
 151:main.c        ****             }
 152:main.c        ****         }
 153:main.c        ****         VDAC8_GS_SetValue(0);
 703              		.loc 2 153 0 is_stmt 1
 704 02e0 0020     		movs	r0, #0
 705 02e2 FFF7FEFF 		bl	VDAC8_GS_SetValue
 154:main.c        ****         CyDelay(300);
 706              		.loc 2 154 0
 707 02e6 4FF49670 		mov	r0, #300
 708 02ea FFF7FEFF 		bl	CyDelay
 155:main.c        ****         ADC_SAR_1_Sleep();
 709              		.loc 2 155 0
 710 02ee FFF7FEFF 		bl	ADC_SAR_1_Sleep
 156:main.c        ****             /*
 157:main.c        ****             case 1:
 158:main.c        ****                 //NPN input
 159:main.c        ****                 Vth =  126; //vgs_th_find(VDAC_G_B_MAX,VDAC_N_1_VOLT);
 160:main.c        ****                 if (Vth < 0)
 161:main.c        ****                 {
 162:main.c        ****                     //Print error function
 163:main.c        ****                 }
 164:main.c        ****                 Vgs_max = 188;  //vgs_max_id_find(Vth,VDAC_D_C_MAX,VDAC_G_B_MAX);
 165:main.c        ****                 Vgs_step = (Vgs_max - Vth)/CURVE_NUM; //Creating the step size for linearlly spaced
 166:main.c        ****                 Vgs_test_points[0] = Vth;
 167:main.c        ****                 for (i=1; i < CURVE_NUM; i++)
 168:main.c        ****                 {
 169:main.c        ****                     Vgs_test_points[i] = (Vgs_test_points[i-1] + Vgs_step);
 170:main.c        ****                 }
 171:main.c        ****                 Vds_test_points[0] = 0;
 172:main.c        ****                 Output_data_x[0] = 0;
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 17


 173:main.c        ****                 for(i=1; i < VDS_NMOS_LENGTH; i++)
 174:main.c        ****                 {
 175:main.c        ****                     Vds_test_points[i] = Vds_test_points[i-1] + VD_STEP_NMOS;
 176:main.c        ****                     Output_data_x[i] = Vds_test_points[i-1]/2560.0 * 3.0 * 4.096; //Translates VDAC
 177:main.c        ****                 }
 178:main.c        ****                 for(i = 0; i < CURVE_NUM; i++)
 179:main.c        ****                 {
 180:main.c        ****                     for(j = 0; j < VDS_NMOS_LENGTH; j++)
 181:main.c        ****                     {
 182:main.c        ****                         Output_data_y[i][j] = single_test(Vds_test_points[j],Vgs_test_points[i]);
 183:main.c        ****                     }
 184:main.c        ****                 }
 185:main.c        ****             case 2:
 186:main.c        ****                 //PMOS input
 187:main.c        ****                 Vth =  126; //vgs_th_find(VDAC_G_B_MAX,VDAC_P_1_VOLT);
 188:main.c        ****                 if (Vth < 0)
 189:main.c        ****                 {
 190:main.c        ****                     //Print error function
 191:main.c        ****                 }
 192:main.c        ****                 Vgs_max = 188;  //vgs_max_id_find(Vth,VDAC_D_C_MAX,VDAC_G_B_MAX);
 193:main.c        ****                 Vgs_step = (Vgs_max - Vth)/CURVE_NUM; //Creating the step size for linearlly spaced
 194:main.c        ****                 Vgs_test_points[0] = Vth;
 195:main.c        ****                 for (i=1; i < CURVE_NUM; i++)
 196:main.c        ****                 {
 197:main.c        ****                     Vgs_test_points[i] = (Vgs_test_points[i-1] + Vgs_step);
 198:main.c        ****                 }
 199:main.c        ****                 Vds_test_points[0] = 0;
 200:main.c        ****                 Output_data_x[0] = 0;
 201:main.c        ****                 for(i=1; i < VDS_NMOS_LENGTH; i++)
 202:main.c        ****                 {
 203:main.c        ****                     Vds_test_points[i] = Vds_test_points[i-1] + VD_STEP_NMOS;
 204:main.c        ****                     Output_data_x[i] = Vds_test_points[i-1]/2560.0 * 3.0 * 4.096; //Translates VDAC
 205:main.c        ****                 }
 206:main.c        ****                 for(i = 0; i < CURVE_NUM; i++)
 207:main.c        ****                 {
 208:main.c        ****                     for(j = 0; j < VDS_NMOS_LENGTH; j++)
 209:main.c        ****                     {
 210:main.c        ****                         Output_data_y[i][j] = single_test(Vds_test_points[j],Vgs_test_points[i]);
 211:main.c        ****                     }
 212:main.c        ****                 }
 213:main.c        ****             case 3:
 214:main.c        ****                 //PNP input
 215:main.c        ****                 Vth =  126; //vgs_th_find(VDAC_G_B_MAX,VDAC_P_1_VOLT);
 216:main.c        ****                 if (Vth < 0)
 217:main.c        ****                 {
 218:main.c        ****                     //Print error function
 219:main.c        ****                 }
 220:main.c        ****                 Vgs_max = 188;  //vgs_max_id_find(Vth,VDAC_D_C_MAX,VDAC_G_B_MAX);
 221:main.c        ****                 Vgs_step = (Vgs_max - Vth)/CURVE_NUM; //Creating the step size for linearlly spaced
 222:main.c        ****                 Vgs_test_points[0] = Vth;
 223:main.c        ****                 for (i=1; i < CURVE_NUM; i++)
 224:main.c        ****                 {
 225:main.c        ****                     Vgs_test_points[i] = (Vgs_test_points[i-1] + Vgs_step);
 226:main.c        ****                 }
 227:main.c        ****                 Vds_test_points[0] = 0;
 228:main.c        ****                 Output_data_x[0] = 0;
 229:main.c        ****                 for(i=1; i < VDS_NMOS_LENGTH; i++)
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 18


 230:main.c        ****                 {
 231:main.c        ****                     Vds_test_points[i] = Vds_test_points[i-1] + VD_STEP_NMOS;
 232:main.c        ****                     Output_data_x[i] = Vds_test_points[i-1]/2560.0 * 3.0 * 4.096; //Translates VDAC
 233:main.c        ****                 }
 234:main.c        ****                 for(i = 0; i < CURVE_NUM; i++)
 235:main.c        ****                 {
 236:main.c        ****                     for(j = 0; j < VDS_NMOS_LENGTH; j++)
 237:main.c        ****                     {
 238:main.c        ****                         Output_data_y[i][j] = single_test(Vds_test_points[j],Vgs_test_points[i]);
 239:main.c        ****                     }
 240:main.c        ****                 }
 241:main.c        ****                 default:
 242:main.c        ****                     continue;
 243:main.c        ****         */
 244:main.c        ****     }
 711              		.loc 2 244 0
 712 02f2 9FE6     		b	.L44
 713              	.L47:
 130:main.c        ****         }
 714              		.loc 2 130 0
 715 02f4 00BF     		nop
 716 02f6 0023     		movs	r3, #0
 245:main.c        **** }
 717              		.loc 2 245 0
 718 02f8 1846     		mov	r0, r3
 719 02fa 07F5F357 		add	r7, r7, #7776
 720              		.cfi_def_cfa_offset 16
 721 02fe BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 0300 B0BD     		pop	{r4, r5, r7, pc}
 725              	.L49:
 726 0302 00BFAFF3 		.align	3
 726      0080
 727              	.L48:
 728 0308 FCA9F1D2 		.word	-755914244
 729 030c 4D621040 		.word	1074815565
 730 0310 56555555 		.word	1431655766
 731 0314 00007040 		.word	1081081856
 732 0318 00000840 		.word	1074266112
 733              		.cfi_endproc
 734              	.LFE69:
 735              		.size	main, .-main
 736              		.text
 737              	.Letext0:
 738              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 739              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 740              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 741              		.section	.debug_info,"",%progbits
 742              	.Ldebug_info0:
 743 0000 06030000 		.4byte	0x306
 744 0004 0400     		.2byte	0x4
 745 0006 00000000 		.4byte	.Ldebug_abbrev0
 746 000a 04       		.byte	0x4
 747 000b 01       		.uleb128 0x1
 748 000c 1A000000 		.4byte	.LASF32
 749 0010 0C       		.byte	0xc
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 19


 750 0011 4E020000 		.4byte	.LASF33
 751 0015 D6000000 		.4byte	.LASF34
 752 0019 00000000 		.4byte	.Ldebug_ranges0+0
 753 001d 00000000 		.4byte	0
 754 0021 00000000 		.4byte	.Ldebug_line0
 755 0025 02       		.uleb128 0x2
 756 0026 01       		.byte	0x1
 757 0027 06       		.byte	0x6
 758 0028 A2020000 		.4byte	.LASF0
 759 002c 02       		.uleb128 0x2
 760 002d 01       		.byte	0x1
 761 002e 08       		.byte	0x8
 762 002f B7010000 		.4byte	.LASF1
 763 0033 02       		.uleb128 0x2
 764 0034 02       		.byte	0x2
 765 0035 05       		.byte	0x5
 766 0036 5A020000 		.4byte	.LASF2
 767 003a 02       		.uleb128 0x2
 768 003b 02       		.byte	0x2
 769 003c 07       		.byte	0x7
 770 003d 7F010000 		.4byte	.LASF3
 771 0041 03       		.uleb128 0x3
 772 0042 A8000000 		.4byte	.LASF9
 773 0046 03       		.byte	0x3
 774 0047 3F       		.byte	0x3f
 775 0048 4C000000 		.4byte	0x4c
 776 004c 02       		.uleb128 0x2
 777 004d 04       		.byte	0x4
 778 004e 05       		.byte	0x5
 779 004f 8D020000 		.4byte	.LASF4
 780 0053 02       		.uleb128 0x2
 781 0054 04       		.byte	0x4
 782 0055 07       		.byte	0x7
 783 0056 6D010000 		.4byte	.LASF5
 784 005a 02       		.uleb128 0x2
 785 005b 08       		.byte	0x8
 786 005c 05       		.byte	0x5
 787 005d 40020000 		.4byte	.LASF6
 788 0061 02       		.uleb128 0x2
 789 0062 08       		.byte	0x8
 790 0063 07       		.byte	0x7
 791 0064 FF010000 		.4byte	.LASF7
 792 0068 04       		.uleb128 0x4
 793 0069 04       		.byte	0x4
 794 006a 05       		.byte	0x5
 795 006b 696E7400 		.ascii	"int\000"
 796 006f 02       		.uleb128 0x2
 797 0070 04       		.byte	0x4
 798 0071 07       		.byte	0x7
 799 0072 F2010000 		.4byte	.LASF8
 800 0076 03       		.uleb128 0x3
 801 0077 1F020000 		.4byte	.LASF10
 802 007b 04       		.byte	0x4
 803 007c 2C       		.byte	0x2c
 804 007d 41000000 		.4byte	0x41
 805 0081 02       		.uleb128 0x2
 806 0082 04       		.byte	0x4
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 20


 807 0083 04       		.byte	0x4
 808 0084 D0000000 		.4byte	.LASF11
 809 0088 02       		.uleb128 0x2
 810 0089 08       		.byte	0x8
 811 008a 04       		.byte	0x4
 812 008b D6010000 		.4byte	.LASF12
 813 008f 02       		.uleb128 0x2
 814 0090 01       		.byte	0x1
 815 0091 08       		.byte	0x8
 816 0092 55020000 		.4byte	.LASF13
 817 0096 02       		.uleb128 0x2
 818 0097 08       		.byte	0x8
 819 0098 04       		.byte	0x4
 820 0099 96020000 		.4byte	.LASF14
 821 009d 05       		.uleb128 0x5
 822 009e 2C000000 		.4byte	0x2c
 823 00a2 AD000000 		.4byte	0xad
 824 00a6 06       		.uleb128 0x6
 825 00a7 AD000000 		.4byte	0xad
 826 00ab 03       		.byte	0x3
 827 00ac 00       		.byte	0
 828 00ad 02       		.uleb128 0x2
 829 00ae 04       		.byte	0x4
 830 00af 07       		.byte	0x7
 831 00b0 27020000 		.4byte	.LASF15
 832 00b4 07       		.uleb128 0x7
 833 00b5 64020000 		.4byte	.LASF16
 834 00b9 01       		.byte	0x1
 835 00ba 0C       		.byte	0xc
 836 00bb 2C000000 		.4byte	0x2c
 837 00bf 00000000 		.4byte	.LFB64
 838 00c3 38000000 		.4byte	.LFE64-.LFB64
 839 00c7 01       		.uleb128 0x1
 840 00c8 9C       		.byte	0x9c
 841 00c9 E8000000 		.4byte	0xe8
 842 00cd 08       		.uleb128 0x8
 843 00ce 7800     		.ascii	"x\000"
 844 00d0 01       		.byte	0x1
 845 00d1 0C       		.byte	0xc
 846 00d2 88000000 		.4byte	0x88
 847 00d6 02       		.uleb128 0x2
 848 00d7 91       		.byte	0x91
 849 00d8 60       		.sleb128 -32
 850 00d9 09       		.uleb128 0x9
 851 00da EA010000 		.4byte	.LASF18
 852 00de 01       		.byte	0x1
 853 00df 0E       		.byte	0xe
 854 00e0 2C000000 		.4byte	0x2c
 855 00e4 02       		.uleb128 0x2
 856 00e5 91       		.byte	0x91
 857 00e6 6F       		.sleb128 -17
 858 00e7 00       		.byte	0
 859 00e8 07       		.uleb128 0x7
 860 00e9 55010000 		.4byte	.LASF17
 861 00ed 02       		.byte	0x2
 862 00ee 13       		.byte	0x13
 863 00ef 88000000 		.4byte	0x88
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 21


 864 00f3 00000000 		.4byte	.LFB65
 865 00f7 70000000 		.4byte	.LFE65-.LFB65
 866 00fb 01       		.uleb128 0x1
 867 00fc 9C       		.byte	0x9c
 868 00fd 2C010000 		.4byte	0x12c
 869 0101 08       		.uleb128 0x8
 870 0102 56647300 		.ascii	"Vds\000"
 871 0106 02       		.byte	0x2
 872 0107 13       		.byte	0x13
 873 0108 2C000000 		.4byte	0x2c
 874 010c 02       		.uleb128 0x2
 875 010d 91       		.byte	0x91
 876 010e 67       		.sleb128 -25
 877 010f 08       		.uleb128 0x8
 878 0110 56677300 		.ascii	"Vgs\000"
 879 0114 02       		.byte	0x2
 880 0115 13       		.byte	0x13
 881 0116 2C000000 		.4byte	0x2c
 882 011a 02       		.uleb128 0x2
 883 011b 91       		.byte	0x91
 884 011c 66       		.sleb128 -26
 885 011d 09       		.uleb128 0x9
 886 011e B2000000 		.4byte	.LASF19
 887 0122 02       		.byte	0x2
 888 0123 15       		.byte	0x15
 889 0124 88000000 		.4byte	0x88
 890 0128 02       		.uleb128 0x2
 891 0129 91       		.byte	0x91
 892 012a 68       		.sleb128 -24
 893 012b 00       		.byte	0
 894 012c 07       		.uleb128 0x7
 895 012d B9000000 		.4byte	.LASF20
 896 0131 02       		.byte	0x2
 897 0132 21       		.byte	0x21
 898 0133 88000000 		.4byte	0x88
 899 0137 00000000 		.4byte	.LFB66
 900 013b 68000000 		.4byte	.LFE66-.LFB66
 901 013f 01       		.uleb128 0x1
 902 0140 9C       		.byte	0x9c
 903 0141 62010000 		.4byte	0x162
 904 0145 08       		.uleb128 0x8
 905 0146 56677300 		.ascii	"Vgs\000"
 906 014a 02       		.byte	0x2
 907 014b 21       		.byte	0x21
 908 014c 2C000000 		.4byte	0x2c
 909 0150 02       		.uleb128 0x2
 910 0151 91       		.byte	0x91
 911 0152 67       		.sleb128 -25
 912 0153 09       		.uleb128 0x9
 913 0154 B2000000 		.4byte	.LASF19
 914 0158 02       		.byte	0x2
 915 0159 23       		.byte	0x23
 916 015a 88000000 		.4byte	0x88
 917 015e 02       		.uleb128 0x2
 918 015f 91       		.byte	0x91
 919 0160 68       		.sleb128 -24
 920 0161 00       		.byte	0
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 22


 921 0162 07       		.uleb128 0x7
 922 0163 61010000 		.4byte	.LASF21
 923 0167 02       		.byte	0x2
 924 0168 32       		.byte	0x32
 925 0169 68000000 		.4byte	0x68
 926 016d 00000000 		.4byte	.LFB67
 927 0171 74000000 		.4byte	.LFE67-.LFB67
 928 0175 01       		.uleb128 0x1
 929 0176 9C       		.byte	0x9c
 930 0177 B3010000 		.4byte	0x1b3
 931 017b 0A       		.uleb128 0xa
 932 017c AF010000 		.4byte	.LASF22
 933 0180 02       		.byte	0x2
 934 0181 32       		.byte	0x32
 935 0182 2C000000 		.4byte	0x2c
 936 0186 02       		.uleb128 0x2
 937 0187 91       		.byte	0x91
 938 0188 5F       		.sleb128 -33
 939 0189 08       		.uleb128 0x8
 940 018a 56647300 		.ascii	"Vds\000"
 941 018e 02       		.byte	0x2
 942 018f 32       		.byte	0x32
 943 0190 2C000000 		.4byte	0x2c
 944 0194 02       		.uleb128 0x2
 945 0195 91       		.byte	0x91
 946 0196 5E       		.sleb128 -34
 947 0197 0B       		.uleb128 0xb
 948 0198 56677300 		.ascii	"Vgs\000"
 949 019c 02       		.byte	0x2
 950 019d 34       		.byte	0x34
 951 019e 2C000000 		.4byte	0x2c
 952 01a2 02       		.uleb128 0x2
 953 01a3 91       		.byte	0x91
 954 01a4 6F       		.sleb128 -17
 955 01a5 0B       		.uleb128 0xb
 956 01a6 496400   		.ascii	"Id\000"
 957 01a9 02       		.byte	0x2
 958 01aa 36       		.byte	0x36
 959 01ab 88000000 		.4byte	0x88
 960 01af 02       		.uleb128 0x2
 961 01b0 91       		.byte	0x91
 962 01b1 60       		.sleb128 -32
 963 01b2 00       		.byte	0
 964 01b3 07       		.uleb128 0x7
 965 01b4 30020000 		.4byte	.LASF23
 966 01b8 02       		.byte	0x2
 967 01b9 4A       		.byte	0x4a
 968 01ba 3A000000 		.4byte	0x3a
 969 01be 00000000 		.4byte	.LFB68
 970 01c2 68000000 		.4byte	.LFE68-.LFB68
 971 01c6 01       		.uleb128 0x1
 972 01c7 9C       		.byte	0x9c
 973 01c8 12020000 		.4byte	0x212
 974 01cc 08       		.uleb128 0x8
 975 01cd 56746800 		.ascii	"Vth\000"
 976 01d1 02       		.byte	0x2
 977 01d2 4A       		.byte	0x4a
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 23


 978 01d3 2C000000 		.4byte	0x2c
 979 01d7 02       		.uleb128 0x2
 980 01d8 91       		.byte	0x91
 981 01d9 67       		.sleb128 -25
 982 01da 0A       		.uleb128 0xa
 983 01db DD010000 		.4byte	.LASF24
 984 01df 02       		.byte	0x2
 985 01e0 4A       		.byte	0x4a
 986 01e1 2C000000 		.4byte	0x2c
 987 01e5 02       		.uleb128 0x2
 988 01e6 91       		.byte	0x91
 989 01e7 66       		.sleb128 -26
 990 01e8 0A       		.uleb128 0xa
 991 01e9 AF010000 		.4byte	.LASF22
 992 01ed 02       		.byte	0x2
 993 01ee 4A       		.byte	0x4a
 994 01ef 2C000000 		.4byte	0x2c
 995 01f3 02       		.uleb128 0x2
 996 01f4 91       		.byte	0x91
 997 01f5 65       		.sleb128 -27
 998 01f6 0B       		.uleb128 0xb
 999 01f7 56677300 		.ascii	"Vgs\000"
 1000 01fb 02       		.byte	0x2
 1001 01fc 4C       		.byte	0x4c
 1002 01fd 2C000000 		.4byte	0x2c
 1003 0201 02       		.uleb128 0x2
 1004 0202 91       		.byte	0x91
 1005 0203 77       		.sleb128 -9
 1006 0204 0B       		.uleb128 0xb
 1007 0205 496400   		.ascii	"Id\000"
 1008 0208 02       		.byte	0x2
 1009 0209 4E       		.byte	0x4e
 1010 020a 88000000 		.4byte	0x88
 1011 020e 02       		.uleb128 0x2
 1012 020f 91       		.byte	0x91
 1013 0210 68       		.sleb128 -24
 1014 0211 00       		.byte	0
 1015 0212 07       		.uleb128 0x7
 1016 0213 E5010000 		.4byte	.LASF25
 1017 0217 02       		.byte	0x2
 1018 0218 60       		.byte	0x60
 1019 0219 68000000 		.4byte	0x68
 1020 021d 00000000 		.4byte	.LFB69
 1021 0221 1C030000 		.4byte	.LFE69-.LFB69
 1022 0225 01       		.uleb128 0x1
 1023 0226 9C       		.byte	0x9c
 1024 0227 C2020000 		.4byte	0x2c2
 1025 022b 0C       		.uleb128 0xc
 1026 022c 0E000000 		.4byte	.LASF35
 1027 0230 02       		.byte	0x2
 1028 0231 67       		.byte	0x67
 1029 0232 68000000 		.4byte	0x68
 1030 0236 0B       		.uleb128 0xb
 1031 0237 6900     		.ascii	"i\000"
 1032 0239 02       		.byte	0x2
 1033 023a 69       		.byte	0x69
 1034 023b 68000000 		.4byte	0x68
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 24


 1035 023f 02       		.uleb128 0x2
 1036 0240 91       		.byte	0x91
 1037 0241 6C       		.sleb128 -20
 1038 0242 0B       		.uleb128 0xb
 1039 0243 6A00     		.ascii	"j\000"
 1040 0245 02       		.byte	0x2
 1041 0246 6A       		.byte	0x6a
 1042 0247 68000000 		.4byte	0x68
 1043 024b 02       		.uleb128 0x2
 1044 024c 91       		.byte	0x91
 1045 024d 68       		.sleb128 -24
 1046 024e 09       		.uleb128 0x9
 1047 024f C5010000 		.4byte	.LASF26
 1048 0253 02       		.byte	0x2
 1049 0254 6C       		.byte	0x6c
 1050 0255 2C000000 		.4byte	0x2c
 1051 0259 02       		.uleb128 0x2
 1052 025a 91       		.byte	0x91
 1053 025b 67       		.sleb128 -25
 1054 025c 0B       		.uleb128 0xb
 1055 025d 56746800 		.ascii	"Vth\000"
 1056 0261 02       		.byte	0x2
 1057 0262 6E       		.byte	0x6e
 1058 0263 68000000 		.4byte	0x68
 1059 0267 02       		.uleb128 0x2
 1060 0268 91       		.byte	0x91
 1061 0269 60       		.sleb128 -32
 1062 026a 09       		.uleb128 0x9
 1063 026b AF010000 		.4byte	.LASF22
 1064 026f 02       		.byte	0x2
 1065 0270 6F       		.byte	0x6f
 1066 0271 33000000 		.4byte	0x33
 1067 0275 02       		.uleb128 0x2
 1068 0276 91       		.byte	0x91
 1069 0277 5E       		.sleb128 -34
 1070 0278 09       		.uleb128 0x9
 1071 0279 16020000 		.4byte	.LASF27
 1072 027d 02       		.byte	0x2
 1073 027e 71       		.byte	0x71
 1074 027f 2C000000 		.4byte	0x2c
 1075 0283 02       		.uleb128 0x2
 1076 0284 91       		.byte	0x91
 1077 0285 5D       		.sleb128 -35
 1078 0286 09       		.uleb128 0x9
 1079 0287 92010000 		.4byte	.LASF28
 1080 028b 02       		.byte	0x2
 1081 028c 72       		.byte	0x72
 1082 028d 9D000000 		.4byte	0x9d
 1083 0291 02       		.uleb128 0x2
 1084 0292 91       		.byte	0x91
 1085 0293 58       		.sleb128 -40
 1086 0294 09       		.uleb128 0x9
 1087 0295 7D020000 		.4byte	.LASF29
 1088 0299 02       		.byte	0x2
 1089 029a 73       		.byte	0x73
 1090 029b C2020000 		.4byte	0x2c2
 1091 029f 03       		.uleb128 0x3
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 25


 1092 02a0 91       		.byte	0x91
 1093 02a1 987E     		.sleb128 -232
 1094 02a3 09       		.uleb128 0x9
 1095 02a4 00000000 		.4byte	.LASF30
 1096 02a8 02       		.byte	0x2
 1097 02a9 75       		.byte	0x75
 1098 02aa D2020000 		.4byte	0x2d2
 1099 02ae 03       		.uleb128 0x3
 1100 02af 91       		.byte	0x91
 1101 02b0 F84E     		.sleb128 -6280
 1102 02b2 09       		.uleb128 0x9
 1103 02b3 AE020000 		.4byte	.LASF31
 1104 02b7 02       		.byte	0x2
 1105 02b8 76       		.byte	0x76
 1106 02b9 E8020000 		.4byte	0x2e8
 1107 02bd 03       		.uleb128 0x3
 1108 02be 91       		.byte	0x91
 1109 02bf 9043     		.sleb128 -7792
 1110 02c1 00       		.byte	0
 1111 02c2 05       		.uleb128 0x5
 1112 02c3 2C000000 		.4byte	0x2c
 1113 02c7 D2020000 		.4byte	0x2d2
 1114 02cb 06       		.uleb128 0x6
 1115 02cc AD000000 		.4byte	0xad
 1116 02d0 BC       		.byte	0xbc
 1117 02d1 00       		.byte	0
 1118 02d2 05       		.uleb128 0x5
 1119 02d3 88000000 		.4byte	0x88
 1120 02d7 E8020000 		.4byte	0x2e8
 1121 02db 06       		.uleb128 0x6
 1122 02dc AD000000 		.4byte	0xad
 1123 02e0 03       		.byte	0x3
 1124 02e1 06       		.uleb128 0x6
 1125 02e2 AD000000 		.4byte	0xad
 1126 02e6 BC       		.byte	0xbc
 1127 02e7 00       		.byte	0
 1128 02e8 05       		.uleb128 0x5
 1129 02e9 88000000 		.4byte	0x88
 1130 02ed F8020000 		.4byte	0x2f8
 1131 02f1 06       		.uleb128 0x6
 1132 02f2 AD000000 		.4byte	0xad
 1133 02f6 BC       		.byte	0xbc
 1134 02f7 00       		.byte	0
 1135 02f8 0D       		.uleb128 0xd
 1136 02f9 A2010000 		.4byte	.LASF36
 1137 02fd 05       		.byte	0x5
 1138 02fe 1207     		.2byte	0x712
 1139 0300 04030000 		.4byte	0x304
 1140 0304 0E       		.uleb128 0xe
 1141 0305 76000000 		.4byte	0x76
 1142 0309 00       		.byte	0
 1143              		.section	.debug_abbrev,"",%progbits
 1144              	.Ldebug_abbrev0:
 1145 0000 01       		.uleb128 0x1
 1146 0001 11       		.uleb128 0x11
 1147 0002 01       		.byte	0x1
 1148 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 26


 1149 0004 0E       		.uleb128 0xe
 1150 0005 13       		.uleb128 0x13
 1151 0006 0B       		.uleb128 0xb
 1152 0007 03       		.uleb128 0x3
 1153 0008 0E       		.uleb128 0xe
 1154 0009 1B       		.uleb128 0x1b
 1155 000a 0E       		.uleb128 0xe
 1156 000b 55       		.uleb128 0x55
 1157 000c 17       		.uleb128 0x17
 1158 000d 11       		.uleb128 0x11
 1159 000e 01       		.uleb128 0x1
 1160 000f 10       		.uleb128 0x10
 1161 0010 17       		.uleb128 0x17
 1162 0011 00       		.byte	0
 1163 0012 00       		.byte	0
 1164 0013 02       		.uleb128 0x2
 1165 0014 24       		.uleb128 0x24
 1166 0015 00       		.byte	0
 1167 0016 0B       		.uleb128 0xb
 1168 0017 0B       		.uleb128 0xb
 1169 0018 3E       		.uleb128 0x3e
 1170 0019 0B       		.uleb128 0xb
 1171 001a 03       		.uleb128 0x3
 1172 001b 0E       		.uleb128 0xe
 1173 001c 00       		.byte	0
 1174 001d 00       		.byte	0
 1175 001e 03       		.uleb128 0x3
 1176 001f 16       		.uleb128 0x16
 1177 0020 00       		.byte	0
 1178 0021 03       		.uleb128 0x3
 1179 0022 0E       		.uleb128 0xe
 1180 0023 3A       		.uleb128 0x3a
 1181 0024 0B       		.uleb128 0xb
 1182 0025 3B       		.uleb128 0x3b
 1183 0026 0B       		.uleb128 0xb
 1184 0027 49       		.uleb128 0x49
 1185 0028 13       		.uleb128 0x13
 1186 0029 00       		.byte	0
 1187 002a 00       		.byte	0
 1188 002b 04       		.uleb128 0x4
 1189 002c 24       		.uleb128 0x24
 1190 002d 00       		.byte	0
 1191 002e 0B       		.uleb128 0xb
 1192 002f 0B       		.uleb128 0xb
 1193 0030 3E       		.uleb128 0x3e
 1194 0031 0B       		.uleb128 0xb
 1195 0032 03       		.uleb128 0x3
 1196 0033 08       		.uleb128 0x8
 1197 0034 00       		.byte	0
 1198 0035 00       		.byte	0
 1199 0036 05       		.uleb128 0x5
 1200 0037 01       		.uleb128 0x1
 1201 0038 01       		.byte	0x1
 1202 0039 49       		.uleb128 0x49
 1203 003a 13       		.uleb128 0x13
 1204 003b 01       		.uleb128 0x1
 1205 003c 13       		.uleb128 0x13
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 27


 1206 003d 00       		.byte	0
 1207 003e 00       		.byte	0
 1208 003f 06       		.uleb128 0x6
 1209 0040 21       		.uleb128 0x21
 1210 0041 00       		.byte	0
 1211 0042 49       		.uleb128 0x49
 1212 0043 13       		.uleb128 0x13
 1213 0044 2F       		.uleb128 0x2f
 1214 0045 0B       		.uleb128 0xb
 1215 0046 00       		.byte	0
 1216 0047 00       		.byte	0
 1217 0048 07       		.uleb128 0x7
 1218 0049 2E       		.uleb128 0x2e
 1219 004a 01       		.byte	0x1
 1220 004b 3F       		.uleb128 0x3f
 1221 004c 19       		.uleb128 0x19
 1222 004d 03       		.uleb128 0x3
 1223 004e 0E       		.uleb128 0xe
 1224 004f 3A       		.uleb128 0x3a
 1225 0050 0B       		.uleb128 0xb
 1226 0051 3B       		.uleb128 0x3b
 1227 0052 0B       		.uleb128 0xb
 1228 0053 27       		.uleb128 0x27
 1229 0054 19       		.uleb128 0x19
 1230 0055 49       		.uleb128 0x49
 1231 0056 13       		.uleb128 0x13
 1232 0057 11       		.uleb128 0x11
 1233 0058 01       		.uleb128 0x1
 1234 0059 12       		.uleb128 0x12
 1235 005a 06       		.uleb128 0x6
 1236 005b 40       		.uleb128 0x40
 1237 005c 18       		.uleb128 0x18
 1238 005d 9642     		.uleb128 0x2116
 1239 005f 19       		.uleb128 0x19
 1240 0060 01       		.uleb128 0x1
 1241 0061 13       		.uleb128 0x13
 1242 0062 00       		.byte	0
 1243 0063 00       		.byte	0
 1244 0064 08       		.uleb128 0x8
 1245 0065 05       		.uleb128 0x5
 1246 0066 00       		.byte	0
 1247 0067 03       		.uleb128 0x3
 1248 0068 08       		.uleb128 0x8
 1249 0069 3A       		.uleb128 0x3a
 1250 006a 0B       		.uleb128 0xb
 1251 006b 3B       		.uleb128 0x3b
 1252 006c 0B       		.uleb128 0xb
 1253 006d 49       		.uleb128 0x49
 1254 006e 13       		.uleb128 0x13
 1255 006f 02       		.uleb128 0x2
 1256 0070 18       		.uleb128 0x18
 1257 0071 00       		.byte	0
 1258 0072 00       		.byte	0
 1259 0073 09       		.uleb128 0x9
 1260 0074 34       		.uleb128 0x34
 1261 0075 00       		.byte	0
 1262 0076 03       		.uleb128 0x3
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 28


 1263 0077 0E       		.uleb128 0xe
 1264 0078 3A       		.uleb128 0x3a
 1265 0079 0B       		.uleb128 0xb
 1266 007a 3B       		.uleb128 0x3b
 1267 007b 0B       		.uleb128 0xb
 1268 007c 49       		.uleb128 0x49
 1269 007d 13       		.uleb128 0x13
 1270 007e 02       		.uleb128 0x2
 1271 007f 18       		.uleb128 0x18
 1272 0080 00       		.byte	0
 1273 0081 00       		.byte	0
 1274 0082 0A       		.uleb128 0xa
 1275 0083 05       		.uleb128 0x5
 1276 0084 00       		.byte	0
 1277 0085 03       		.uleb128 0x3
 1278 0086 0E       		.uleb128 0xe
 1279 0087 3A       		.uleb128 0x3a
 1280 0088 0B       		.uleb128 0xb
 1281 0089 3B       		.uleb128 0x3b
 1282 008a 0B       		.uleb128 0xb
 1283 008b 49       		.uleb128 0x49
 1284 008c 13       		.uleb128 0x13
 1285 008d 02       		.uleb128 0x2
 1286 008e 18       		.uleb128 0x18
 1287 008f 00       		.byte	0
 1288 0090 00       		.byte	0
 1289 0091 0B       		.uleb128 0xb
 1290 0092 34       		.uleb128 0x34
 1291 0093 00       		.byte	0
 1292 0094 03       		.uleb128 0x3
 1293 0095 08       		.uleb128 0x8
 1294 0096 3A       		.uleb128 0x3a
 1295 0097 0B       		.uleb128 0xb
 1296 0098 3B       		.uleb128 0x3b
 1297 0099 0B       		.uleb128 0xb
 1298 009a 49       		.uleb128 0x49
 1299 009b 13       		.uleb128 0x13
 1300 009c 02       		.uleb128 0x2
 1301 009d 18       		.uleb128 0x18
 1302 009e 00       		.byte	0
 1303 009f 00       		.byte	0
 1304 00a0 0C       		.uleb128 0xc
 1305 00a1 34       		.uleb128 0x34
 1306 00a2 00       		.byte	0
 1307 00a3 03       		.uleb128 0x3
 1308 00a4 0E       		.uleb128 0xe
 1309 00a5 3A       		.uleb128 0x3a
 1310 00a6 0B       		.uleb128 0xb
 1311 00a7 3B       		.uleb128 0x3b
 1312 00a8 0B       		.uleb128 0xb
 1313 00a9 49       		.uleb128 0x49
 1314 00aa 13       		.uleb128 0x13
 1315 00ab 00       		.byte	0
 1316 00ac 00       		.byte	0
 1317 00ad 0D       		.uleb128 0xd
 1318 00ae 34       		.uleb128 0x34
 1319 00af 00       		.byte	0
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 29


 1320 00b0 03       		.uleb128 0x3
 1321 00b1 0E       		.uleb128 0xe
 1322 00b2 3A       		.uleb128 0x3a
 1323 00b3 0B       		.uleb128 0xb
 1324 00b4 3B       		.uleb128 0x3b
 1325 00b5 05       		.uleb128 0x5
 1326 00b6 49       		.uleb128 0x49
 1327 00b7 13       		.uleb128 0x13
 1328 00b8 3F       		.uleb128 0x3f
 1329 00b9 19       		.uleb128 0x19
 1330 00ba 3C       		.uleb128 0x3c
 1331 00bb 19       		.uleb128 0x19
 1332 00bc 00       		.byte	0
 1333 00bd 00       		.byte	0
 1334 00be 0E       		.uleb128 0xe
 1335 00bf 35       		.uleb128 0x35
 1336 00c0 00       		.byte	0
 1337 00c1 49       		.uleb128 0x49
 1338 00c2 13       		.uleb128 0x13
 1339 00c3 00       		.byte	0
 1340 00c4 00       		.byte	0
 1341 00c5 00       		.byte	0
 1342              		.section	.debug_aranges,"",%progbits
 1343 0000 44000000 		.4byte	0x44
 1344 0004 0200     		.2byte	0x2
 1345 0006 00000000 		.4byte	.Ldebug_info0
 1346 000a 04       		.byte	0x4
 1347 000b 00       		.byte	0
 1348 000c 0000     		.2byte	0
 1349 000e 0000     		.2byte	0
 1350 0010 00000000 		.4byte	.LFB64
 1351 0014 38000000 		.4byte	.LFE64-.LFB64
 1352 0018 00000000 		.4byte	.LFB65
 1353 001c 70000000 		.4byte	.LFE65-.LFB65
 1354 0020 00000000 		.4byte	.LFB66
 1355 0024 68000000 		.4byte	.LFE66-.LFB66
 1356 0028 00000000 		.4byte	.LFB67
 1357 002c 74000000 		.4byte	.LFE67-.LFB67
 1358 0030 00000000 		.4byte	.LFB68
 1359 0034 68000000 		.4byte	.LFE68-.LFB68
 1360 0038 00000000 		.4byte	.LFB69
 1361 003c 1C030000 		.4byte	.LFE69-.LFB69
 1362 0040 00000000 		.4byte	0
 1363 0044 00000000 		.4byte	0
 1364              		.section	.debug_ranges,"",%progbits
 1365              	.Ldebug_ranges0:
 1366 0000 00000000 		.4byte	.LFB64
 1367 0004 38000000 		.4byte	.LFE64
 1368 0008 00000000 		.4byte	.LFB65
 1369 000c 70000000 		.4byte	.LFE65
 1370 0010 00000000 		.4byte	.LFB66
 1371 0014 68000000 		.4byte	.LFE66
 1372 0018 00000000 		.4byte	.LFB67
 1373 001c 74000000 		.4byte	.LFE67
 1374 0020 00000000 		.4byte	.LFB68
 1375 0024 68000000 		.4byte	.LFE68
 1376 0028 00000000 		.4byte	.LFB69
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 30


 1377 002c 1C030000 		.4byte	.LFE69
 1378 0030 00000000 		.4byte	0
 1379 0034 00000000 		.4byte	0
 1380              		.section	.debug_line,"",%progbits
 1381              	.Ldebug_line0:
 1382 0000 71020000 		.section	.debug_str,"MS",%progbits,1
 1382      02005401 
 1382      00000201 
 1382      FB0E0D00 
 1382      01010101 
 1383              	.LASF30:
 1384 0000 4F757470 		.ascii	"Output_data_y\000"
 1384      75745F64 
 1384      6174615F 
 1384      7900
 1385              	.LASF35:
 1386 000e 72657475 		.ascii	"return_code\000"
 1386      726E5F63 
 1386      6F646500 
 1387              	.LASF32:
 1388 001a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1388      43313120 
 1388      352E342E 
 1388      31203230 
 1388      31363036 
 1389 004d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1389      20726576 
 1389      6973696F 
 1389      6E203233 
 1389      37373135 
 1390 0080 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1390      66756E63 
 1390      74696F6E 
 1390      2D736563 
 1390      74696F6E 
 1391              	.LASF9:
 1392 00a8 5F5F696E 		.ascii	"__int32_t\000"
 1392      7433325F 
 1392      7400
 1393              	.LASF19:
 1394 00b2 4F757470 		.ascii	"Output\000"
 1394      757400
 1395              	.LASF20:
 1396 00b9 73696E67 		.ascii	"single_test_preset_vds\000"
 1396      6C655F74 
 1396      6573745F 
 1396      70726573 
 1396      65745F76 
 1397              	.LASF11:
 1398 00d0 666C6F61 		.ascii	"float\000"
 1398      7400
 1399              	.LASF34:
 1400 00d6 433A5C55 		.ascii	"C:\\Users\\Jacob-Laptop\\Documents\\PSoC Creator\\S"
 1400      73657273 
 1400      5C4A6163 
 1400      6F622D4C 
 1400      6170746F 
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 31


 1401 0104 656E696F 		.ascii	"enior Project Stuff\\PSoC Curve Tracer PSoC Process"
 1401      72205072 
 1401      6F6A6563 
 1401      74205374 
 1401      7566665C 
 1402 0136 696E675C 		.ascii	"ing\\Senior Project Stuff.cydsn\000"
 1402      53656E69 
 1402      6F722050 
 1402      726F6A65 
 1402      63742053 
 1403              	.LASF17:
 1404 0155 73696E67 		.ascii	"single_test\000"
 1404      6C655F74 
 1404      65737400 
 1405              	.LASF21:
 1406 0161 7667735F 		.ascii	"vgs_th_find\000"
 1406      74685F66 
 1406      696E6400 
 1407              	.LASF5:
 1408 016d 6C6F6E67 		.ascii	"long unsigned int\000"
 1408      20756E73 
 1408      69676E65 
 1408      6420696E 
 1408      7400
 1409              	.LASF3:
 1410 017f 73686F72 		.ascii	"short unsigned int\000"
 1410      7420756E 
 1410      7369676E 
 1410      65642069 
 1410      6E7400
 1411              	.LASF28:
 1412 0192 5667735F 		.ascii	"Vgs_test_points\000"
 1412      74657374 
 1412      5F706F69 
 1412      6E747300 
 1413              	.LASF36:
 1414 01a2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1414      52784275 
 1414      66666572 
 1414      00
 1415              	.LASF22:
 1416 01af 5667735F 		.ascii	"Vgs_max\000"
 1416      6D617800 
 1417              	.LASF1:
 1418 01b7 756E7369 		.ascii	"unsigned char\000"
 1418      676E6564 
 1418      20636861 
 1418      7200
 1419              	.LASF26:
 1420 01c5 64657669 		.ascii	"device_selection\000"
 1420      63655F73 
 1420      656C6563 
 1420      74696F6E 
 1420      00
 1421              	.LASF12:
 1422 01d6 646F7562 		.ascii	"double\000"
 1422      6C6500
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 32


 1423              	.LASF24:
 1424 01dd 5664735F 		.ascii	"Vds_max\000"
 1424      6D617800 
 1425              	.LASF25:
 1426 01e5 6D61696E 		.ascii	"main\000"
 1426      00
 1427              	.LASF18:
 1428 01ea 785F726F 		.ascii	"x_round\000"
 1428      756E6400 
 1429              	.LASF8:
 1430 01f2 756E7369 		.ascii	"unsigned int\000"
 1430      676E6564 
 1430      20696E74 
 1430      00
 1431              	.LASF7:
 1432 01ff 6C6F6E67 		.ascii	"long long unsigned int\000"
 1432      206C6F6E 
 1432      6720756E 
 1432      7369676E 
 1432      65642069 
 1433              	.LASF27:
 1434 0216 5667735F 		.ascii	"Vgs_step\000"
 1434      73746570 
 1434      00
 1435              	.LASF10:
 1436 021f 696E7433 		.ascii	"int32_t\000"
 1436      325F7400 
 1437              	.LASF15:
 1438 0227 73697A65 		.ascii	"sizetype\000"
 1438      74797065 
 1438      00
 1439              	.LASF23:
 1440 0230 7667735F 		.ascii	"vgs_max_id_find\000"
 1440      6D61785F 
 1440      69645F66 
 1440      696E6400 
 1441              	.LASF6:
 1442 0240 6C6F6E67 		.ascii	"long long int\000"
 1442      206C6F6E 
 1442      6720696E 
 1442      7400
 1443              	.LASF33:
 1444 024e 6D61696E 		.ascii	"main.c\000"
 1444      2E6300
 1445              	.LASF13:
 1446 0255 63686172 		.ascii	"char\000"
 1446      00
 1447              	.LASF2:
 1448 025a 73686F72 		.ascii	"short int\000"
 1448      7420696E 
 1448      7400
 1449              	.LASF16:
 1450 0264 65696768 		.ascii	"eight_bit_unsigned_round\000"
 1450      745F6269 
 1450      745F756E 
 1450      7369676E 
 1450      65645F72 
ARM GAS  C:\Users\JACOB-~1\AppData\Local\Temp\ccT20UbC.s 			page 33


 1451              	.LASF29:
 1452 027d 5664735F 		.ascii	"Vds_test_points\000"
 1452      74657374 
 1452      5F706F69 
 1452      6E747300 
 1453              	.LASF4:
 1454 028d 6C6F6E67 		.ascii	"long int\000"
 1454      20696E74 
 1454      00
 1455              	.LASF14:
 1456 0296 6C6F6E67 		.ascii	"long double\000"
 1456      20646F75 
 1456      626C6500 
 1457              	.LASF0:
 1458 02a2 7369676E 		.ascii	"signed char\000"
 1458      65642063 
 1458      68617200 
 1459              	.LASF31:
 1460 02ae 4F757470 		.ascii	"Output_data_x\000"
 1460      75745F64 
 1460      6174615F 
 1460      7800
 1461              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
